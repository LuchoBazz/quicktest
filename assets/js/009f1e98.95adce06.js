"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[715],{5680:(e,n,i)=>{i.d(n,{xA:()=>c,yg:()=>m});var t=i(6540);function a(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function l(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function r(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?l(Object(i),!0).forEach((function(n){a(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function o(e,n){if(null==e)return{};var i,t,a=function(e,n){if(null==e)return{};var i,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)i=l[t],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)i=l[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var g=t.createContext({}),s=function(e){var n=t.useContext(g),i=n;return e&&(i="function"==typeof e?e(n):r(r({},n),e)),i},c=function(e){var n=s(e.components);return t.createElement(g.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var i=e.components,a=e.mdxType,l=e.originalType,g=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(i),p=a,m=u["".concat(g,".").concat(p)]||u[p]||d[p]||l;return i?t.createElement(m,r(r({ref:n},c),{},{components:i})):t.createElement(m,r({ref:n},c))}));function m(e,n){var i=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=i.length,r=new Array(l);r[0]=p;var o={};for(var g in n)hasOwnProperty.call(n,g)&&(o[g]=n[g]);o.originalType=e,o[u]="string"==typeof e?e:a,r[1]=o;for(var s=2;s<l;s++)r[s]=i[s];return t.createElement.apply(null,r)}return t.createElement.apply(null,i)}p.displayName="MDXCreateElement"},9519:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>g,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var t=i(8168),a=(i(6540),i(5680));const l={sidebar_position:2,title:"Configuration",sidebar_label:"Configuration"},r=void 0,o={unversionedId:"getting-started/configuration",id:"getting-started/configuration",title:"Configuration",description:"Configuration File Example",source:"@site/docs/getting-started/configuration.md",sourceDirName:"getting-started",slug:"/getting-started/configuration",permalink:"/quicktest/docs/getting-started/configuration",draft:!1,editUrl:"https://github.com/LuchoBazz/quicktest/tree/main/website/docs/getting-started/configuration.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Configuration",sidebar_label:"Configuration"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/quicktest/docs/getting-started/installation"},next:{title:"Errors",permalink:"/quicktest/docs/getting-started/errors"}},g={},s=[{value:"Configuration File Example",id:"configuration-file-example",level:2},{value:"Scheme",id:"scheme",level:3},{value:"Fields Description",id:"fields-description",level:2},{value:"<code>languages: list&lt;Languages&gt;</code> Field",id:"languages-listlanguages-field",level:3},{value:"<code>languages[i]</code>",id:"languagesi",level:2},{value:"<code>id: string</code> Field",id:"id-string-field",level:3},{value:"<code>name: string</code> Field",id:"name-string-field",level:3},{value:"<code>extensions: list&lt;string&gt;</code> Field",id:"extensions-liststring-field",level:3},{value:"<code>description: string</code> Field",id:"description-string-field",level:3},{value:"<code>config_files: Object</code> Field",id:"config_files-object-field",level:3},{value:"<code>env: Object</code> Field",id:"env-object-field",level:3},{value:"<code>initialize: Object</code> Field",id:"initialize-object-field",level:3},{value:"<code>compile: Object</code> Field",id:"compile-object-field",level:3},{value:"<code>execute: Object</code> Field",id:"execute-object-field",level:3},{value:"<code>check_installed: String</code> Field",id:"check_installed-string-field",level:3},{value:"<code>~/.quicktest/languages.config.json</code> File",id:"quicktestlanguagesconfigjson-file",level:2}],c={toc:s},u="wrapper";function d(e){let{components:n,...i}=e;return(0,a.yg)(u,(0,t.A)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"configuration-file-example"},"Configuration File Example"),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"Path:")," ",(0,a.yg)("inlineCode",{parentName:"p"},"~/.quicktest/languages.config.json")),(0,a.yg)("h3",{id:"scheme"},"Scheme"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n    "languages":[\n        {\n            "id":"string",\n            "name":"string",\n            "extensions":["string"],\n            "description":"string",\n            "config_files":[\n                {\n                    "path":"string",\n                    "content":"string"\n                }\n            ],\n            "env":{\n                "PROGRAM":"string"\n            },\n            "initialize":{\n                "unix":"string",\n                "windows":"string"\n            },\n            "compile":{\n                "unix":"string",\n                "windows":"string"\n            },\n            "execute":{\n                "unix":"string",\n                "windows":"string"\n            },\n            "check_installed":"string"\n        }\n    ]\n}\n')),(0,a.yg)("h2",{id:"fields-description"},"Fields Description"),(0,a.yg)("h3",{id:"languages-listlanguages-field"},(0,a.yg)("inlineCode",{parentName:"h3"},"languages: list<Languages>")," Field"),(0,a.yg)("p",null,"List of supported languages"),(0,a.yg)("h2",{id:"languagesi"},(0,a.yg)("inlineCode",{parentName:"h2"},"languages[i]")),(0,a.yg)("h3",{id:"id-string-field"},(0,a.yg)("inlineCode",{parentName:"h3"},"id: string")," Field"),(0,a.yg)("p",null,"Language Identifier"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Required:")," ",(0,a.yg)("inlineCode",{parentName:"li"},"true")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Example:")," ")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'"id":"Language::Cpp"\n')),(0,a.yg)("h3",{id:"name-string-field"},(0,a.yg)("inlineCode",{parentName:"h3"},"name: string")," Field"),(0,a.yg)("p",null,"Language Name"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Required:")," ",(0,a.yg)("inlineCode",{parentName:"li"},"true")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Example:")," ")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'"name":"GNU C++17 (64)"\n')),(0,a.yg)("h3",{id:"extensions-liststring-field"},(0,a.yg)("inlineCode",{parentName:"h3"},"extensions: list<string>")," Field"),(0,a.yg)("p",null,"List of extensions to run with the associated language"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Required:")," ",(0,a.yg)("inlineCode",{parentName:"li"},"true")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Example:")," ")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'"extensions":[\n    "hh",\n    "hpp",\n    "hxx",\n    "h++",\n    "cc",\n    "cpp",\n    "cxx",\n    "c++"\n]\n')),(0,a.yg)("h3",{id:"description-string-field"},(0,a.yg)("inlineCode",{parentName:"h3"},"description: string")," Field"),(0,a.yg)("p",null,"Brief description of the language"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Required:")," ",(0,a.yg)("inlineCode",{parentName:"li"},"true")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Example:")," ")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'"description":"GNU C++ compiler"\n')),(0,a.yg)("h3",{id:"config_files-object-field"},(0,a.yg)("inlineCode",{parentName:"h3"},"config_files: Object")," Field"),(0,a.yg)("p",null,"Configuration files for the specific language, which will be created in the ",(0,a.yg)("inlineCode",{parentName:"p"},"path")," with the ",(0,a.yg)("inlineCode",{parentName:"p"},"content")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Required:")," ",(0,a.yg)("inlineCode",{parentName:"li"},"false")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Example:")," ")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "path":"~/.quicktest/rust/Cargo.toml",\n        "content":"[package]\\nname = \\"rust\\"\\nversion = \\"0.1.0\\"\\nedition = \\"2021\\"\\n[dependencies]"\n    }\n]\n')),(0,a.yg)("h3",{id:"env-object-field"},(0,a.yg)("inlineCode",{parentName:"h3"},"env: Object")," Field"),(0,a.yg)("p",null,"Environment variables that can be used in command fields"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Required:")," ",(0,a.yg)("inlineCode",{parentName:"li"},"true")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Example:")," ")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'"env":{\n    "PROGRAM":"g++",\n    "STANDARD":"-std=c++17"\n}\n// "compile":{\n//    "unix":"${PROGRAM} ${STANDARD} ${FILE_NAME}.cpp -o .qt/${FILE_NAME_BINARY}",\n//    "windows":"${PROGRAM} ${STANDARD} ${FILE_NAME}.cpp -o .qt/${FILE_NAME_BINARY}.exe"\n// }\n\n// will be processed to\n\n// "compile":{\n//    "unix":"g++ -std=c++17 main.cpp -o main",\n//    "windows":"g++ -std=c++17 main.cpp -o main.exe"\n// }\n')),(0,a.yg)("h3",{id:"initialize-object-field"},(0,a.yg)("inlineCode",{parentName:"h3"},"initialize: Object")," Field"),(0,a.yg)("p",null,"Command to be executed before language compilation"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Required:")," ",(0,a.yg)("inlineCode",{parentName:"li"},"false")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Example:")," ")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'"initialize":{\n    "unix":"cargo init ~/.quicktest/rust",\n    "windows":"cargo init ~/.quicktest/rust"\n}\n')),(0,a.yg)("h3",{id:"compile-object-field"},(0,a.yg)("inlineCode",{parentName:"h3"},"compile: Object")," Field"),(0,a.yg)("p",null,"Language compile command"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Required:")," ",(0,a.yg)("inlineCode",{parentName:"li"},"false")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Example:")," ")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'"compile":{\n    "unix":"${PROGRAM} ${STANDARD} ${FILE_NAME}.cpp -o .qt${FILE_NAME_BINARY}",\n    "windows":"${PROGRAM} ${STANDARD} ${FILE_NAME}.cpp -o .qt/${FILE_NAME_BINARY}.exe"\n}\n')),(0,a.yg)("h3",{id:"execute-object-field"},(0,a.yg)("inlineCode",{parentName:"h3"},"execute: Object")," Field"),(0,a.yg)("p",null,"Language execution command"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Required:")," ",(0,a.yg)("inlineCode",{parentName:"li"},"true")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Example:")," ")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'"execute":{\n    "unix":".qt/${FILE_NAME_BINARY}",\n    "windows":".qt/${FILE_NAME_BINARY}.exe"\n},\n')),(0,a.yg)("h3",{id:"check_installed-string-field"},(0,a.yg)("inlineCode",{parentName:"h3"},"check_installed: String")," Field"),(0,a.yg)("p",null,"Command to verify that the program with which the programming language is going to be executed is installed locally"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Required:")," ",(0,a.yg)("inlineCode",{parentName:"li"},"true")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Example:")," ")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'"check_installed":"${PROGRAM} --help"\n')),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"quicktestlanguagesconfigjson-file"},(0,a.yg)("inlineCode",{parentName:"h2"},"~/.quicktest/languages.config.json")," File"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n    "languages":[\n        {\n            "id":"Language::Cpp",\n            "name":"GNU C++17 (64)",\n            "extensions":[\n                "hh",\n                "hpp",\n                "hxx",\n                "h++",\n                "cc",\n                "cpp",\n                "cxx",\n                "c++"\n            ],\n            "description":"GNU C++ compiler",\n            "env":{\n                "PROGRAM":"g++",\n                "STANDARD":"-std=c++17"\n            },\n            "compile":{\n                "unix":"${PROGRAM} ${STANDARD} ${FILE_NAME}.cpp -o .qt/${FILE_NAME_BINARY}",\n                "windows":"${PROGRAM} ${STANDARD} ${FILE_NAME}.cpp -o .qt/${FILE_NAME_BINARY}.exe"\n            },\n            "execute":{\n                "unix":".qt/${FILE_NAME_BINARY}",\n                "windows":".qt/${FILE_NAME_BINARY}.exe"\n            },\n            "check_installed":"${PROGRAM} --help"\n        },\n        {\n            "id":"Language::Python",\n            "name":"Python 3",\n            "extensions":[\n                "py"\n            ],\n            "description":"Python Language Interpreter",\n            "env":{\n                "PROGRAM":"python3"\n            },\n            "execute":{\n                "unix":"${PROGRAM} ${FILE_NAME}.py",\n                "windows":"${PROGRAM} ${FILE_NAME}.py"\n            },\n            "check_installed":"${PROGRAM} --help"\n        },\n        {\n            "id":"Language::Java",\n            "name":"Java",\n            "extensions":[\n                "java"\n            ],\n            "description":"Java Programming Language",\n            "env":{\n                "PROGRAM":"java",\n                "COMPILER":"javac"\n            },\n            "compile":{\n                "unix":"${COMPILER} -d .qt/ ${FILE_NAME}.java",\n                "windows":"${COMPILER} -d .qt/ ${FILE_NAME}.java"\n            },\n            "execute":{\n                "unix":"${PROGRAM} -cp .qt/ ${FILE_NAME_BINARY}",\n                "windows":"${PROGRAM} -cp .qt/ ${FILE_NAME_BINARY}"\n            },\n            "check_installed":"${PROGRAM}"\n        },\n        {\n            "id":"Language::C",\n            "name":"GNU GCC C11",\n            "extensions":[\n                "h",\n                "c"\n            ],\n            "description":"GNU C compiler",\n            "env":{\n                "PROGRAM":"gcc",\n                "STANDARD":"-std=gnu11"\n            },\n            "compile":{\n                "unix":"${PROGRAM} ${STANDARD} ${FILE_NAME}.c -o .qt/${FILE_NAME_BINARY}",\n                "windows":"${PROGRAM} ${STANDARD} ${FILE_NAME}.c -o .qt/${FILE_NAME_BINARY}.exe"\n            },\n            "execute":{\n                "unix":".qt/${FILE_NAME_BINARY}",\n                "windows":".qt/${FILE_NAME_BINARY}.exe"\n            },\n            "check_installed":"${PROGRAM} --help"\n        },\n        {\n            "id":"Language::Rust",\n            "name":"Rust Lang",\n            "extensions":[\n                "rs"\n            ],\n            "description":"Rust Programming Language",\n            "config_files":[\n                {\n                    "path":"~/.quicktest/rust/Cargo.toml",\n                    "content":"[package]\\nname = \\"rust\\"\\nversion = \\"0.1.0\\"\\nedition = \\"2021\\"\\n[dependencies]\\nproconio = \\"0.4.3\\"\\nnum = \\"0.4.0\\"\\nrand = { version = \\"0.8.5\\", features = [\\"small_rng\\"]}\\nregex = \\"1.5.5\\"\\nnum-bigint = \\"0.4.3\\""\n                }\n            ],\n            "env":{\n                "PROGRAM":"cargo"\n            },\n            "initialize":{\n                "unix":"${PROGRAM} init ~/.quicktest/rust",\n                "windows":"${PROGRAM} init ~/.quicktest/rust"\n            },\n            "compile":{\n                "unix":"cp ${FILE_NAME}.rs ~/.quicktest/rust/src/main.rs && ${PROGRAM} build --release --quiet --manifest-path ~/.quicktest/rust/Cargo.toml && cp ~/.quicktest/rust/target/release/rust .qt/${FILE_NAME_BINARY}",\n                "windows":"cp ${FILE_NAME}.rs ~/.quicktest/rust/src/main.rs && ${PROGRAM} build --release --quiet --manifest-path ~/.quicktest/rust/Cargo.toml && cp ~/.quicktest/rust/target/release/rust .qt/${FILE_NAME_BINARY}.exe"\n            },\n            "execute":{\n                "unix":".qt/${FILE_NAME_BINARY}",\n                "windows":".qt/${FILE_NAME_BINARY}.exe"\n            },\n            "check_installed":"${PROGRAM} --help"\n        },\n        {\n            "id":"Language::Go",\n            "name":"Go Lang",\n            "extensions":[\n                "go"\n            ],\n            "description":"Go Programming Language",\n            "config_files":[\n                {\n                    "path":"~/.quicktest/go_mod/go.mod",\n                    "content":"module go_mod\\n\\ngo 1.17\\n\\ngithub.com/emirpasic/gods v1.18.1 // indirect\\n\\n"\n                }\n            ],\n            "env":{\n                "PROGRAM":"go"\n            },\n            "initialize":{\n                "unix":"mkdir ~/.quicktest/go_mod && GO111MODULE=off ${PROGRAM} get github.com/emirpasic/gods && GO111MODULE=off ${PROGRAM} get https://github.com/gonum/gonum",\n                "windows":"mkdir ~/.quicktest/go_mod && GO111MODULE=off ${PROGRAM} get github.com/emirpasic/gods && GO111MODULE=off ${PROGRAM} get https://github.com/gonum/gonum"\n            },\n            "compile":{\n                "unix":"cp ${FILE_NAME}.go ~/.quicktest/go_mod/main.go && ${PROGRAM} build -buildmode=exe -o ./.qt/${FILE_NAME_BINARY} ~/.quicktest/go_mod/main.go",\n                "windows":"cp ${FILE_NAME}.go ~/.quicktest/go_mod/main.go && ${PROGRAM} build -buildmode=exe -o ./.qt/${FILE_NAME_BINARY}.exe ~/.quicktest/go_mod/main.go"\n            },\n            "execute":{\n                "unix":".qt/${FILE_NAME_BINARY}",\n                "windows":".qt/${FILE_NAME_BINARY}.exe"\n            },\n            "check_installed":"${PROGRAM} --version"\n        },\n        {\n            "id":"Language::Kotlin",\n            "name":"Kotlin",\n            "extensions":[\n                "kt"\n            ],\n            "description":"Kotlin Programming Language",\n            "env":{\n                "PROGRAM":"java",\n                "COMPILER":"kotlinc"\n            },\n            "compile":{\n                "unix":"${COMPILER} ${FILE_NAME}.kt -include-runtime -d .qt/${FILE_NAME_BINARY}.jar",\n                "windows":"${COMPILER} ${FILE_NAME}.kt -include-runtime -d .qt/${FILE_NAME_BINARY}.jar"\n            },\n            "execute":{\n                "unix":"${PROGRAM} -jar .qt/${FILE_NAME_BINARY}.jar",\n                "windows":"${PROGRAM} -jar .qt/${FILE_NAME_BINARY}.jar"\n            },\n            "check_installed":"${PROGRAM}"\n        }\n    ]\n}\n')))}d.isMDXComponent=!0}}]);